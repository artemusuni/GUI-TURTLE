#need to import turtle and tkinter libraries
from tkinter import *;
import turtle;
#starting main loop
root = Tk();
root.title("This is all you have teached me");

#defining the functions for drawing(turtle) 
def draw_circle(radius, color):
    turtle.fillcolor(color);
    turtle.begin_fill();
    turtle.circle(radius);
    turtle.end_fill();

def draw_triangle(side_length, color):
    turtle.fillcolor(color);
    turtle.begin_fill();
    for x in range(3):
        turtle.forward(side_length);
        turtle.left(120);
    turtle.end_fill();


def draw_square(side_length, color):
    turtle.fillcolor(color);
    turtle.begin_fill();
    for x in range(4):
        turtle.forward(side_length);
        turtle.left(90);
    turtle.end_fill();

#ADD A FUNCTION TO DRAW CUSTOM SHAPES
def draw_shapes(num_sides, side_length, color):
    turtle.fillcolor(color);
    turtle.begin_fill();
    for x in range(num_sides):
        turtle.forward(side_length);
        turtle.left(360/num_sides);

    turtle.end_fill();

#ADD A FUNCTION FOR LETTER DRAWING
def draw_word(word):        
    word = word.upper();                   #FIX THE OVERLAP!!!!!!!!!!!maybe use if statements
    x = -300;
    turtle.pensize(5);
    for letter in word:
        turtle.penup();
        turtle.goto(x, 0);
        if letter == "A": A();
        if letter == "B": B();
        if letter == "C":               #PROBEM IF C iS THE last letter
            turtle.goto(x+30 , 0);
            C();
        if letter == "D": D();
        if letter == "E": E();        
        if letter == "F": F();
        if letter == "G":
            turtle.goto(x+20, 0);
            G();
        if letter == "H": H();
        if letter == "I": I();
        if letter == "J": J();
        if letter == "K": K();
        if letter == "L": L();
        if letter == "M": M();
        if letter == "N": N();
        if letter == "O": O();
        if letter == "P": P();
        if letter == "Q": Q();
        if letter == "R": R();
        if letter == "S": S();
        if letter == "T": T();
        if letter == "U": U();
        if letter == "V": V();
        if letter == "W": W();
        if letter == "X": X();
        if letter == "Y": Y();
        if letter == "Z": Z();

        if letter == "C":  x+=70;
        else: x+=100;

#ADDING FUNCTION FOR PIXELIZED LETTERS
def pixel_word(pixels):

    def draw_square():
        turtle.pendown();
        turtle.fillcolor("black");
        turtle.begin_fill();
        for x in range(2):
            turtle.forward(20);
            turtle.left(90);
            turtle.forward(20);
            turtle.left(90);
        turtle.end_fill();

    #pixels = str(input("ENETR THE WORD: "));
    turtle.speed(10000);
    y = 200;
    x = -700;
    biggest_x = x;
    for pixel in pixels:
        #ADD IF STATEMENTS
        if pixel == "a": f1 = open("a.txt");
        if pixel == "b": f1 = open("b.txt");
        if pixel == "c": f1 = open("c.txt");
        if pixel == "d": f1 = open("d.txt");
        if pixel == "e": f1 = open("e.txt");
        if pixel == "f": f1 = open("f.txt");

        if pixel == "g": f1 = open("g.txt");
        if pixel == "h": f1 = open("h.txt");
        if pixel == "i": f1 = open("i.txt");
        if pixel == "j": f1 = open("j.txt");
        if pixel == "k": f1 = open("k.txt");
        if pixel == "l": f1 = open("l.txt");
        if pixel == "m": f1 = open("m.txt");
        if pixel == "n": f1 = open("n.txt");
        if pixel == "o": f1 = open("o.txt");

        if pixel == "p": f1 = open("p.txt");
        if pixel == "q": f1 = open("q.txt");
        if pixel == "r": f1 = open("r.txt");
        if pixel == "s": f1 = open("s.txt");
        if pixel == "t": f1 = open("t.txt");
        if pixel == "u": f1 = open("u.txt");
        if pixel == "v": f1 = open("v.txt");
        if pixel == "w": f1 = open("w.txt");
        if pixel == "x": f1 = open("x.txt");
        if pixel == "y": f1 = open("y.txt");
        if pixel == "z": f1 = open("z.txt");

        #UPPERCASE
        if pixel == "A": f1 = open("A.txt");
        if pixel == "B": f1 = open("B.txt");
        if pixel == "C": f1 = open("C.txt");
        if pixel == "D": f1 = open("D.txt");
        if pixel == "E": f1 = open("E.txt");
        if pixel == "F": f1 = open("F.txt");
        if pixel == "G": f1 = open("G.txt");
        if pixel == "H": f1 = open("H.txt");
        if pixel == "I": f1 = open("I.txt");
        if pixel == "J": f1 = open("J.txt");
        if pixel == "K": f1 = open("K.txt");
        if pixel == "L": f1 = open("L.txt");
        if pixel == "M": f1 = open("M.txt");
        if pixel == "N": f1 = open("N.txt");
        if pixel == "O": f1 = open("O.txt");
        if pixel == "P": f1 = open("P.txt");
        if pixel == "Q": f1 = open("Q.txt");
        if pixel == "R": f1 = open("R.txt");
        if pixel == "S": f1 = open("S.txt");
        if pixel == "T": f1 = open("T.txt");
        if pixel == "U": f1 = open("U.txt");
        if pixel == "V": f1 = open("V.txt");
        if pixel == "W": f1 = open("W.txt");
        if pixel == "X": f1 = open("X.txt");
        if pixel == "Y": f1 = open("Y.txt");
        if pixel == "Z": f1 = open("Z.txt");

        lines = f1.readlines();
        f1.close();
        turtle.penup();
        turtle.goto(x, y)
        base_x = x;
        base_y = y;

        screen = turtle.Screen();
        turtle.tracer(0);

        for line in lines:
            turtle.penup();
            turtle.goto(x, y);
            for element in line:
                if element == " ":
                    x+=30;
                    turtle.goto(x, y);
                    if x > biggest_x:
                        biggest_x = x;
                if element == "x":
                    turtle.pendown();
                    draw_square();
                    turtle.penup();
                    x+=30;
                    turtle.goto(x, y);
                    if x > biggest_x:
                        biggest_x = x;
            #########
            turtle.update();
            x = base_x;
            y -= 40;
        x = base_x + ((biggest_x - base_x)+20);
        y = base_y;
    input();


#defining functons for opening a new window
def new_circle_window():
    window = Toplevel(root, bg="black");
    #label
    label = Label(window, text="ENTER THE PARAMETERS:", font=8, fg="white", bg="black");
    label.grid(row= 0, column = 0);

    #entry for radius
    entry_radius = Entry(window, borderwidth=10);
    entry_radius.grid(row=1, column=0);
    entry_radius.insert(0, "Enter the radius");

    #entry for fillcolor
    entry_fillcolor = Entry(window, borderwidth=10);
    entry_fillcolor.grid(row=2, column=0);
    entry_fillcolor.insert(0, "Enter the fillcolor");
    #button for submition
    button = Button(window, text= "SUBMIT", borderwidth=5, fg="white", bg="black", command=lambda:draw_circle(int(entry_radius.get()), str(entry_fillcolor.get())));
    button.grid(row=3, column=0);


def new_triangle_window():
    window = Toplevel(root, bg="black");
    #label
    label = Label(window, text="ENTER THE PARAMETERS:", font=8, bg="black", fg="white");
    label.grid(row=0, column=0);
    #sidelength entry
    entry_length = Entry(window, borderwidth=10);
    entry_length.grid(row=1, column=0);
    entry_length.insert(0, "Enter the side length");
    #entry for fillcolor
    entry_fillcolor = Entry(window, borderwidth=10);
    entry_fillcolor.grid(row=2, column=0);
    entry_fillcolor.insert(0, "Enter the fillcolor");
    #button for submition
    button = Button(window, text="SUBMIT", borderwidth=5, fg="white", bg="black", command = lambda:draw_triangle(int(entry_length.get()), str(entry_fillcolor.get() )));
    button.grid(row=3, column=0);


def new_square_window():
    window = Toplevel(root, bg="black");
    #label
    label = Label(window, text="ENTER THE PARAMETERS",font=8, bg="black", fg="white");
    label.grid(row=0, column=0);
    #entry for sidelength
    entry_sidelength = Entry(window, borderwidth=10);
    entry_sidelength.grid(row=1, column=0);
    entry_sidelength.insert(0,"Enter the side length");
    #entry for fillcolor
    entry_fillcolor = Entry(window, borderwidth=10);
    entry_fillcolor.grid(row=2, column=0);
    entry_fillcolor.insert(0, "Enter the fillcolor");
    #button
    button = Button(window, text="SUBMIT", bg="black", fg="white", borderwidth=5,command=lambda:draw_square(int(entry_sidelength.get()), str(entry_fillcolor.get())));
    button.grid(row=3, column=0);

#WINDOW FOR COSTOM
def new_custom_window():
    window = Toplevel(root, bg="black");
    #LABEL
    label = Label(window, text="CHOOSE WHAT TO DRAW", font=8, bg="black", fg="white");
    label.grid(row=0, column=0);
    #BUTTON FOR SHAPES
    button1 = Button(window, text="SHAPES", padx=30, pady=20, borderwidth=10, bg="black", fg="white", font=8, command=lambda:new_shapes_window()); 
    button1.grid(row=1, column=0);
    #BUTTON FOR WORDS
    button2 = Button(window, text="WORD", padx=35, pady=20, borderwidth=10, bg="black", fg="white", font=8, command=lambda:new_word_window());
    button2.grid(row=2, column=0);

#SECOND WINDOW FOR SHAPES 
def new_shapes_window():
    window = Toplevel(root, bg="black");
    #LABEL
    label = Label(window, text="ENTER THE PARAMETERS", bg="black", fg="white", font=8);
    label.grid(row=0, column=0);
    #ENTRY FOR NUMBER OF SIDES
    entry_number_sides = Entry(window, borderwidth=8)
    entry_number_sides.grid(row=1, column=0);
    entry_number_sides.insert(0, "Enter number of sides");
    #ENTRY FOR SIDE LENGTH
    entry_side_length = Entry(window, borderwidth=8);
    entry_side_length.grid(row=2, column=0);
    entry_side_length.insert(0, "Enter side length");
    #ENTRY FOR FILLCOLOR
    entry_fillcolor = Entry(window, borderwidth=8);
    entry_fillcolor.grid(row=3, column=0);
    entry_fillcolor.insert(0, "Enter fillcolor");
    #SUBMITION BUTTON
    button = Button(window, text="SUBMIT", bg="black", fg="white", borderwidth=5, command=lambda:draw_shapes(int(entry_number_sides.get()), int(entry_side_length.get()), str(entry_fillcolor.get())));
    button.grid(row=4, column=0);

#NEW WINDOW FOR WORD DRAWING         
def new_word_window():
    window  = Toplevel(root, bg="black");
    #LABEl
    label = Label(window, text="ENTER THE LETTER", bg="black", fg="white", font=10);
    label.grid(row=0, column=0);
    #ENTRY FOR THE WORD
    entry_word = Entry(window, borderwidth=8);
    entry_word.grid(row=1, column=0);
    #SUBMIT BUTTON
    button = Button(window, text="LETTER", bg="black", fg="white", borderwidth=5, command=lambda:draw_word(entry_word.get()));
    button.grid(row=2, column=0);
    button_pixel = Button(window, text="WORD", bg="black", fg="white", borderwidth=5, command=lambda:pixel_word(entry_word.get()));
    button_pixel.grid(row=3, column=0);

#Adding the label on te top
label = Label(root, text = "WHAT DO YOU WANT TO DRAW?");
label.grid(row=0, column=0);
#declaring buttons
button_circle = Button(root, text = "CIRCLE", padx=30, pady=20, borderwidth=10, bg="black", fg="white", font=10, command=lambda:new_circle_window());
button_triangle = Button(root, text = "TRIANGLE", padx=19, pady=20, borderwidth=10, bg="black", fg="white", font=10, command=lambda:new_triangle_window());
button_square = Button(root, text = "SQUARE", padx=30, pady= 20, borderwidth=10, bg="black", fg="white", font=10, command=lambda:new_square_window());
button_custom = Button(root, text="CUSTOM", padx=30, pady=20, borderwidth=10, bg="black", fg="white", font=10, command=lambda:new_custom_window());

#gridding the buttons
button_circle.grid(row=1, column=0);
button_triangle.grid(row=2, column=0);
button_square.grid(row=3, column= 0);
button_custom.grid(row=4, column=0);
#-----------------------------------------------------------------------
#LETTERS FUNCTION
def A():
    turtle.pendown();
    turtle.left(65);
    turtle.forward(100);
    turtle.left(-130);
    turtle.forward(100);
    turtle.penup();
    turtle.left(180);
    turtle.forward(50);
    turtle.left(65);
    turtle.pendown();
    turtle.forward(43);
    turtle.penup();
    turtle.right(180);                               

def B():
    turtle.pendown();
    turtle.left(90);
    turtle.forward(100);
    turtle.right(90);
    turtle.circle(-25, 180);
    turtle.left(180);
    turtle.circle(-25, 180);
    turtle.left(180);

def C():
    turtle.pendown();
    turtle.left(180);
    turtle.circle(-45, 180);
#CHECH IF D WORDS
def D():
    turtle.pendown();
    turtle.left(90);
    turtle.forward(100);
    turtle.right(90);
    turtle.circle(-50, 180);
    turtle.right(180);
#CHECH IF E WORDS
def E():
    turtle.pendown();
    turtle.forward(60);
    turtle.left(180);
    turtle.forward(60);
    turtle.right(90);
    turtle.forward(100);
    turtle.right(90);
    turtle.forward(60);
    turtle.right(180);
    turtle.forward(60);
    turtle.left(90);
    turtle.forward(50);
    turtle.left(90);
    turtle.forward(60);

def F():
    turtle.pendown();
    turtle.left(90);
    turtle.forward(100);
    turtle.right(90);
    turtle.forward(50);
    turtle.left(180);
    turtle.forward(50);
    turtle.left(90);
    turtle.forward(35);
    turtle.left(90);
    turtle.forward(50);

def G():
    turtle.pendown();
    turtle.left(90);
    turtle.forward(50);
    turtle.left(90);
    turtle.forward(30);
    turtle.right(180);
    turtle.forward(30);
    turtle.right(90);
    turtle.forward(50);
    turtle.left(90);
    turtle.circle(50, -180);
    turtle.left(180);

def H():
    turtle.pendown();
    turtle.left(90);
    turtle.forward(100);
    turtle.right(180);
    turtle.forward(50);
    turtle.left(90);
    turtle.forward(50);
    turtle.left(90);
    turtle.forward(50);
    turtle.right(180);
    turtle.forward(100);
    turtle.left(90);

def I():
    turtle.pendown();
    turtle.forward(30);
    turtle.left(180);
    turtle.forward(60);
    turtle.right(180);
    turtle.forward(30);
    turtle.left(90);
    turtle.forward(100);
    turtle.left(90);
    turtle.forward(30);
    turtle.right(180);
    turtle.forward(60);

def J():
    turtle.pendown();
    turtle.circle(50, 90);
    turtle.forward(40);
    turtle.left(90);
    turtle.forward(40);
    turtle.right(180);
    turtle.forward(80);

def K():
    turtle.pendown();
    turtle.left(90);
    turtle.forward(60);
    turtle.right(145);
    turtle.forward(70);
    turtle.left(180);
    turtle.forward(70);
    turtle.right(40);
    turtle.right(45);
    turtle.forward(60);
    turtle.left(180);
    turtle.forward(60);
    turtle.right(125);
    turtle.forward(40);
    turtle.left(90);

def L():
    turtle.pendown();
    turtle.forward(50);
    turtle.left(180);
    turtle.forward(50);
    turtle.right(90);
    turtle.forward(100);
    turtle.right(90);

def M():
    turtle.pendown();
    turtle.left(90);
    turtle.forward(100);
    turtle.right(150);
    turtle.forward(60);
    turtle.left(120);
    turtle.forward(60);
    turtle.right(150);
    turtle.forward(100);
    turtle.left(90);

def N():
    turtle.pendown();
    turtle.left(90);
    turtle.forward(100);
    turtle.right(155);
    turtle.forward(110);
    turtle.left(155);
    turtle.forward(100);
    turtle.right(90);


def O():
    turtle.left(90);
    turtle.forward(30);
    turtle.right(180);
    turtle.pendown();
    turtle.circle(35, 180);
    turtle.forward(35);
    turtle.circle(35, 180);
    turtle.forward(35);
    turtle.left(90);

def P():
    turtle.pendown();
    turtle.left(90);
    turtle.forward(100);
    turtle.right(90);
    turtle.circle(-28, 180);
    turtle.left(180);

def Q():
    turtle.left(90);
    turtle.forward(30);
    turtle.left(180);
    turtle.pendown();
    turtle.circle(30, 180);
    turtle.forward(20);
    turtle.circle(30, 180);
    turtle.forward(30);
    turtle.left(90);
    turtle.penup();
    turtle.forward(60);
    turtle.left(150);
    turtle.pendown();
    turtle.forward(30);
    turtle.right(180);
    turtle.forward(50);
    turtle.left(30);

def R():
    turtle.pendown();
    turtle.left(90);
    turtle.forward(100);
    turtle.left(90);
    turtle.circle(27, -180);
    turtle.right(50);
    turtle.forward(60);
    turtle.left(50);

def S():
    turtle.pendown();
    turtle.forward(20);
    turtle.circle(23, 180);
    turtle.forward(10);
    turtle.circle(-23, 180);
    turtle.forward(20);

def T():
    turtle.pendown();
    turtle.left(90);
    turtle.forward(85);
    turtle.left(90);
    turtle.forward(30);
    turtle.right(180);
    turtle.forward(60);

def U():
    turtle.left(90);
    turtle.forward(80);
    turtle.right(180);
    turtle.pendown();
    turtle.forward(45)
    turtle.circle(30, 180);
    turtle.forward(45);
    turtle.right(90);

def V():
    turtle.pendown();
    turtle.left(110);
    turtle.forward(90);
    turtle.right(180);
    turtle.forward(90);
    turtle.left(140);
    turtle.forward(90);
    turtle.right(70);

def W():
    turtle.pendown();
    turtle.left(120);
    turtle.forward(75);
    turtle.left(180);
    turtle.forward(75);
    turtle.left(120);
    turtle.forward(50);
    turtle.right(120);
    turtle.forward(50);
    turtle.left(125);
    turtle.forward(75);
    turtle.right(65);

def X():
    turtle.pendown();
    turtle.left(50);
    turtle.forward(100);
    turtle.left(180);
    turtle.forward(50);
    turtle.right(100);
    turtle.forward(50);
    turtle.left(180);
    turtle.forward(100);
    turtle.left(50);

def Y():
    turtle.pendown();
    turtle.left(90);
    turtle.forward(55);
    turtle.left(45);
    turtle.forward(35);
    turtle.left(180);
    turtle.forward(35);
    turtle.left(90);
    turtle.forward(35);
    turtle.right(45);

def Z():
    turtle.pendown();
    turtle.forward(70);
    turtle.left(180);
    turtle.forward(70);
    turtle.right(135);
    turtle.forward(110);
    turtle.left(135);
    turtle.forward(70);
    turtle.right(180);


root.mainloop();




